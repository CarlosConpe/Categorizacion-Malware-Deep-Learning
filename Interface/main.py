from classes.DataParser import *
from classes.MachineLearningModel import *
from classes.ConvolutionalNeuralNetwork import *
from classes.NeuralNetwork import *

import sys
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import ImageTk, Image
from threading import *
import random
import time

# Machine learning:
import tensorflow as tf
import matplotlib.pyplot as plt

WIDTH_WINDOW = 900
HEIGHT_WINDOW = 475
flag_dataset = False
flag_compilado = False
flag_entrenado = False
flag_evaluacion = False
folder_selected = ""

global menu
global our_parser
global ai_models


class App(ttk.Frame):
    global WIDTH_WINDOW, HEIGHT_WINDOW, flag_dataset, flag_compilado, flag_entrenado, folder_selected

    green_check_images = [None, None, None]
    main_window = tk.Tk()

    def __init__(self, title, color):
        super().__init__(self.main_window)
        self.main_window.title(title)
        self.main_window.configure(width=WIDTH_WINDOW, height=HEIGHT_WINDOW, bg=color)
        self.folder_selected = folder_selected

    def make_label(self, x, y, w, h, *args, **kwargs):
        frame = ttk.Frame(self.main_window, height=h, width=w)
        frame.pack_propagate(True)
        frame.place(x=x, y=y)
        label = ttk.Label(frame, *args, **kwargs, wraplength=w)
        label.pack(fill=tk.BOTH, expand=False)
        return label

    def make_button(self, x, y, w, h, button_text, func=exit, *args, **kwargs):
        button = ttk.Button(
            self.main_window, text=button_text, command=func, *args, **kwargs
        )
        button.place(x=x, y=y, width=w, height=h)
        return button

    def make_image(self, x, y, image):
        image = Image.open(image)
        render = ImageTk.PhotoImage(image)
        img = ttk.Label(self.main_window, image=render)
        img.image = render
        img.place(x=x, y=y)
        return img

    def exit(self):
        self.main_window.destroy()

    def check_steps(self):
        global flag_dataset, flag_compilado, flag_entrenado

        if flag_dataset and isinstance(self.green_check_images[0], type(None)):
            self.green_check_images[0] = self.make_image(
                350, 153, "./Images/check_small.png"
            )
        if (
            flag_entrenado
            and flag_compilado
            and isinstance(self.green_check_images[1], type(None))
        ):
            self.green_check_images[1] = self.make_image(
                350, 203, "./Images/check_small.png"
            )
        if flag_evaluacion and isinstance(self.green_check_images[2], type(None)):
            self.green_check_images[2] = self.make_image(
                350, 253, "./Images/check_small.png"
            )

        if not flag_dataset and not isinstance(self.green_check_images[0], type(None)):
            self.green_check_images[0].destroy()
            self.green_check_images[0] = None
        if (
            not flag_entrenado
            and not flag_compilado
            and not isinstance(self.green_check_images[1], type(None))
        ):
            self.green_check_images[1].destroy()
            self.green_check_images[1] = None
        if not flag_evaluacion and not isinstance(
            self.green_check_images[2], type(None)
        ):
            self.green_check_images[2].destroy()
            self.green_check_images[2] = None


class Main_window(App):
    def __init__(self, title, color):
        App.__init__(self, title, color)
        self.add_widgets()

    def window_load_dataset_show(self):
        global folder_selected, flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu, our_parser

        folder_selected = ""
        flag_dataset = False
        flag_compilado = False
        flag_entrenado = False
        flag_evaluacion = False

        # We create an instance of our data parser, we will use the MNIST dataset to test
        our_parser = DataParser(tf.keras.datasets.mnist)
        if our_parser:
            # Parser creates training and testing dataset from original dataset
            our_parser.preprocess(training=0.7, testing=0.3)
            flag_dataset = True
        else:
            our_parser = None
            flag_dataset = False

        menu.check_steps()

    def window_compile_train_show(self):
        global flag_dataset, flag_entrenado, flag_compilado, menu

        if flag_dataset:
            window = Compile_train_window("Compilar y Entrenar", "#ECECEC")
            menu.check_steps()
            return window
        else:
            self.window_load_dataset_show()
            if flag_dataset:
                window = Compile_train_window("Compilar y Entrenar", "#ECECEC")
                menu.check_steps()
                return window
        return

    def window_evaluate_show(self):
        global flag_dataset, flag_entrenado, flag_compilado, menu

        if flag_compilado and flag_entrenado:
            window = Evaluate_window("Evaluar", "#ECECEC")
            menu.check_steps()
            return window
        else:
            self.window_compile_train_show()

    def restablecer_parametros_iniciales(self):
        global folder_selected, flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu
        folder_selected = ""
        flag_dataset = False
        flag_compilado = False
        flag_entrenado = False
        flag_evaluacion = False
        menu.check_steps()

    def add_widgets(self):
        self.make_label(
            40,
            40,
            300,
            100,
            text="Clasificaci√≥n de Malware Mediante Deep Learning",
            background="white",
            font=("Arial", 19),
        )
        self.make_button(
            40, 150, 300, 40, "Cargar Dataset", self.window_load_dataset_show
        )
        self.make_button(
            40, 200, 300, 40, "Compilar y Entrenar", self.window_compile_train_show
        )
        self.make_button(40, 250, 300, 40, "Evaluar", self.window_evaluate_show)
        self.make_button(40, 400, 100, 40, "Salir", self.exit)
        self.make_button(
            150, 400, 190, 40, "Restablecer", self.restablecer_parametros_iniciales
        )
        self.make_image(500, 60, "./Images/uaslp.jpg")


class Secondary_window(App):
    global WIDTH_WINDOW, HEIGHT_WINDOW, flag_dataset, flag_compilado, flag_entrenado, folder_selected

    def __init__(self, title, color):
        self.main_window = tk.Toplevel()
        App.__init__(self, title, color)

    def exit(self):
        self.main_window.withdraw()


class Compile_train_window(Secondary_window):
    model_progresses_compile = []
    model_progresses_train = []

    threads_compile = []
    threads_train = []

    def __init__(self, title, color):
        Secondary_window.__init__(self, title, color)
        self.provisional_height = HEIGHT_WINDOW + 40 * 2
        self.main_window.configure(
            width=WIDTH_WINDOW, height=self.provisional_height, bg=color
        )
        self.model_progresses_compile = []
        self.model_progresses_train = []
        self.threads_compile = []
        self.threads_train = []
        self.load_widgets()

    def load_widgets(self):
        self.make_label(
            40,
            40,
            WIDTH_WINDOW - 100,
            50,
            text="Estatus",
            background="white",
            font="Arial 12 bold",
        )

        self.make_button(
            WIDTH_WINDOW - 150,
            self.provisional_height - 65,
            100,
            40,
            "Salir",
            self.exit,
        )
        self.make_button(
            WIDTH_WINDOW - 250,
            40 + 15,
            200,
            40,
            "Compilar y Entrenar",
            func=lambda: self.show_progress(
                40, 120, self.model_progresses_compile, self.threads_compile, "compile"
            ),
        )

    def show_progress(self, x, y, model_processes, threads, proccess):
        global flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu, our_parser, ai_models

        # We define our CNN hyperparameters and instantiate:
        our_CNN = ConvolutionalNeuralNetwork(
            architecture=[28 * 2, 28 * 4, 28 * 2],
            input_size=10,
            input_shape=(28, 28, 1),
            output_size=our_parser.output_shape,
            epochs=1,
            name="Our First CNN",
            verbose=False,
        )

        # We define our NN hyperparameters and instantiate:
        mnist_network = NeuralNetwork(
            architecture=[128, 64],
            input_size=our_parser.data_shape,
            output_size=our_parser.output_shape,
            epochs=3,
            name="MNIST neural network",
            verbose=False,
        )

        # We create an array of models that contains the 2 neural networks we created above
        ai_models = []
        ai_models.append(our_CNN)
        ai_models.append(mnist_network)

        for model in ai_models:
            model.compile()

        if (proccess == "train") or (proccess == "compile"):
            for i in range(0, len(ai_models)):
                model_processes.append(
                    ttk.Progressbar(
                        self.main_window,
                        orient=tk.HORIZONTAL,
                        length=WIDTH_WINDOW - 100,
                        mode="determinate",
                    )
                )
                model_processes[i].place(x=x, y=y + 70 * i)
                self.make_label(
                    x,
                    (y - 30) + 70 * i,
                    WIDTH_WINDOW - 100,
                    50,
                    text=ai_models[i].name,
                    background="white",
                    font=("Arial", 11),
                )

            self.main_window.update()
            i = 0
            for model in ai_models:
                model.train(
                    training_data=our_parser.training_data,
                    training_labels=our_parser.training_labels,
                )
                thread = Thread(target=self.step, args=(i, model_processes))
                threads.append(thread)
                i = i + 1

            for j in threads:
                j.start()

            flag_dataset = True
            flag_compilado = True
            flag_entrenado = True
            flag_evaluacion = False

            self.make_image(160, 35, "./Images/check_small.png")

            menu.check_steps()

    def step(self, i, model_processes):
        try:
            while model_processes[i]["value"] < 99:
                model_processes[i]["value"] += 1 * random.randint(0, 9)
                self.main_window.update_idletasks()
                time.sleep(0.05 * random.randint(0, 9))
        except:
            x = [i for i, a in locals().items() if a == model_processes][0]
            print("Bad Execcution, Thread " + str(i) + " Stopped (" + x + ")")


class Evaluate_window(Secondary_window):
    def __init__(self, title, color):
        Secondary_window.__init__(self, title, color)
        self.provisional_height = HEIGHT_WINDOW
        self.provisional_width = WIDTH_WINDOW + 200 * (len(ai_models) + 1)
        self.main_window.configure(
            height=self.provisional_height, width=self.provisional_width, bg=color
        )
        self.load_widgets()

    def generate_plots_times(self, ai_model):
        data = {
            "Entrenamiento": ai_model.training_time,
            "Evaluacion": ai_model.evaluation_time,
        }
        fig = plt.figure(figsize=(10, 5))
        plt.bar(list(data.keys()), list(data.values()), width=0.4)
        plt.xlabel("Tipo")
        plt.ylabel("Tiempo (Segundos)")
        plt.title("Tiempo entrenamiento vs evaluaci√≥n:" + ai_model.name)
        DPI = fig.get_dpi()
        fig.set_size_inches(460.0 / float(DPI), 300.0 / float(DPI))
        fig.savefig("Images/graph-" + ai_model.name + "-times.png", bbox_inches="tight")

    def generate_plot_accuracy(self):
        global ai_models

        data = {}

        for model in ai_models:
            data[model.name] = model.accuracy

        fig = plt.figure(figsize=(6 * len(ai_models), 5))
        plt.bar(list(data.keys()), list(data.values()), width=0.5)
        plt.xlabel("Modelo")
        plt.ylabel("Precisi√≥n")
        plt.title("Precisi√≥n de Algoritmos de AI")
        DPI = fig.get_dpi()
        fig.set_size_inches(500.0 * len(ai_models) / float(DPI), 450.0 / float(DPI))
        fig.savefig("Images/graph-accuracy.png", bbox_inches="tight")

    def window_plots_show(self):
        window = Plot_window("Graficos - Resultados", "#ECECEC")
        return window

    def load_widgets(self):

        global menu, flag_evaluacion, ai_models

        # We determine their accuracy given testing samples
        for model in ai_models:
            model.evaluate(our_parser.generate_testing_samples(sample_size=300))

        self.make_label(
            40,
            40,
            WIDTH_WINDOW - 100,
            50,
            text="Evaluaci√≥n",
            background="white",
            font="Arial 12 bold",
        )

        self.make_button(
            self.provisional_width - 130,
            self.provisional_height - 65,
            100,
            40,
            "Salir",
            self.exit,
        )

        self.make_button(
            50,
            self.provisional_height - 65,
            160,
            40,
            "Ventana: Grafico",
            self.window_plots_show,
        )

        for i in range(0, len(ai_models)):
            self.make_label(
                500 * i + 50,
                120,
                self.provisional_width - 100,
                50,
                text=ai_models[i].name,
                background="white",
                font="Arial 12 bold",
            )

            self.generate_plots_times(ai_models[i])

            self.make_label(
                500 * i + 50,
                180,
                self.provisional_width - 100,
                50,
                text="Tiempo de Entrenamiento: "
                + str(ai_models[i].training_time)
                + " seg",
                background="white",
                font="Arial 11 bold",
            )

            self.make_label(
                500 * i + 50,
                230,
                self.provisional_width - 100,
                50,
                text="Tiempo de Evaluaci√≥n: "
                + str(ai_models[i].evaluation_time)
                + " seg",
                background="white",
                font="Arial 11 bold",
            )

            self.make_label(
                500 * i + 50,
                280,
                self.provisional_width - 100,
                50,
                text="Precisi√≥n del Modelo: " + str(ai_models[i].accuracy),
                background="white",
                font="Arial 11 bold",
            )

            self.make_label(
                500 * i + 50,
                330,
                self.provisional_width - 100,
                50,
                text="Memoria consumida: " + str(sys.getsizeof(ai_models[i])) + " MB",
                background="white",
                font="Arial 11 bold",
            )

        self.generate_plot_accuracy()

        flag_evaluacion = True
        menu.check_steps()


class Plot_window(Secondary_window):
    def __init__(self, title, color):
        Secondary_window.__init__(self, title, color)
        self.provisional_height = HEIGHT_WINDOW + 150
        self.provisional_width = WIDTH_WINDOW + 200 * (len(ai_models) + 1)
        self.main_window.configure(
            height=self.provisional_height, width=self.provisional_width, bg=color
        )
        self.load_widgets()

    def clear_frame(self):
        for widgets in self.main_window.winfo_children():
            widgets.destroy()

    def show_plot_times(self):
        global ai_models
        self.clear_frame()
        self.load_widgets()
        for i in range(0, len(ai_models)):
            self.make_image(
                500 * i + 50, 50, "./Images/graph-" + ai_models[i].name + "-times.png"
            )
            self.make_label(
                500 * i + 50,
                390,
                self.provisional_width - 100,
                50,
                text="Tiempo de Entrenamiento: "
                + str(ai_models[i].training_time)
                + " seg",
                background="white",
                font="Arial 11 bold",
            )

            self.make_label(
                500 * i + 50,
                440,
                self.provisional_width - 100,
                50,
                text="Tiempo de Evaluaci√≥n: "
                + str(ai_models[i].evaluation_time)
                + " seg",
                background="white",
                font="Arial 11 bold",
            )

    def show_plot_accuracy(self):
        self.clear_frame()
        self.load_widgets()
        self.make_image(50, 50, "./Images/graph-accuracy.png")
        for i in range(0, len(ai_models)):
            self.make_label(
                930,
                220 + i * 50,
                self.provisional_width - 100,
                50,
                text="Precisi√≥n - : "
                + ai_models[i].name
                + ": "
                + str(ai_models[i].accuracy)[0:5],
                background="white",
                font="Arial 11 bold",
            )

    def load_widgets(self):
        self.make_button(
            50,
            self.provisional_height - 65,
            160,
            40,
            "Grafico: Tiempos",
            self.show_plot_times,
        )

        self.make_button(
            250,
            self.provisional_height - 65,
            160,
            40,
            "Grafico: Precisi√≥n",
            self.show_plot_accuracy,
        )

        self.make_button(
            self.provisional_width - 130,
            self.provisional_height - 65,
            100,
            40,
            "Salir",
            self.exit,
        )


def main():
    global menu
    menu = Main_window("Clasificaci√≥n de Malware Mediante Deep Learning", "#ECECEC")
    menu.mainloop()


if __name__ == "__main__":
    main()
