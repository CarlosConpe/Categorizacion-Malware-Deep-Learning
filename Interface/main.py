import tkinter as tk
from tkinter import filedialog, ttk
from PIL import ImageTk, Image
from threading import *
import random
import time

WIDTH_WINDOW = 900
HEIGHT_WINDOW = 475
flag_dataset = False
flag_compilado = False
flag_entrenado = False
flag_evaluacion = False
folder_selected = ""

global menu


class App(ttk.Frame):
    global WIDTH_WINDOW, HEIGHT_WINDOW, flag_dataset, flag_compilado, flag_entrenado, folder_selected

    ai_models = ["Redes Neuronales", "6BE", "SVM"]
    green_check_images = [None, None, None]
    main_window = tk.Tk()

    def __init__(self, title, color):
        super().__init__(self.main_window)
        self.main_window.title(title)
        self.main_window.configure(width=WIDTH_WINDOW, height=HEIGHT_WINDOW, bg=color)
        self.folder_selected = folder_selected

    def make_label(self, x, y, w, h, *args, **kwargs):
        frame = ttk.Frame(self.main_window, height=h, width=w)
        frame.pack_propagate(True)
        frame.place(x=x, y=y)
        label = ttk.Label(frame, *args, **kwargs, wraplength=w)
        label.pack(fill=tk.BOTH, expand=False)
        return label

    def make_button(self, x, y, w, h, button_text, func=exit, *args, **kwargs):
        button = ttk.Button(self.main_window, text=button_text, command=func, *args, **kwargs)
        button.place(x=x, y=y, width=w, height=h)
        return button

    def make_image(self, x, y, image):
        image = Image.open(image)
        render = ImageTk.PhotoImage(image)
        img = ttk.Label(self.main_window, image=render)
        img.image = render
        img.place(x=x, y=y)
        return img

    def exit(self):
        self.main_window.destroy()

    def check_steps(self):
        global flag_dataset, flag_compilado, flag_entrenado

        if flag_dataset and isinstance(self.green_check_images[0], type(None)):
            self.green_check_images[0] = self.make_image(350, 153, "./Images/check_small.png")
        if flag_entrenado and flag_compilado and isinstance(self.green_check_images[1], type(None)):
            self.green_check_images[1] = self.make_image(350, 203, "./Images/check_small.png")
        if flag_evaluacion and isinstance(self.green_check_images[2], type(None)):
            self.green_check_images[2] = self.make_image(350, 253, "./Images/check_small.png")

        if not flag_dataset and not isinstance(self.green_check_images[0], type(None)):
            self.green_check_images[0].destroy()
            self.green_check_images[0] = None
        if not flag_entrenado and not flag_compilado and not isinstance(self.green_check_images[1], type(None)):
            self.green_check_images[1].destroy()
            self.green_check_images[1] = None
        if not flag_evaluacion and not isinstance(self.green_check_images[2], type(None)):
            self.green_check_images[2].destroy()
            self.green_check_images[2] = None

        print(self.green_check_images)
        # print(str(flag_dataset) + "  -  " + str(flag_compilado) + "  -  " + str(flag_entrenado))


class Main_window(App):

    def __init__(self, title, color):
        App.__init__(self, title, color)
        self.add_widgets()

    def window_load_dataset_show(self):
        global folder_selected, flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu

        folder_selected = ""
        flag_dataset = False
        flag_compilado = False
        flag_entrenado = False
        flag_evaluacion = False

        folder_selected = tk.filedialog.askdirectory()
        if folder_selected:
            flag_dataset = True
        else:
            folder_selected = ""
            flag_dataset = False

        menu.check_steps()
        print(folder_selected)

    def window_compile_train_show(self):
        global flag_dataset, flag_entrenado, flag_compilado, menu

        if flag_dataset:
            window = Compile_train_window("Compilar y Entrenar", "#ECECEC")
            menu.check_steps()
            return window
        else:
            self.window_load_dataset_show()
            if flag_dataset:
                window = Compile_train_window("Compilar y Entrenar", "#ECECEC")
                menu.check_steps()
                return window
        return

    def window_evaluate_show(self):
        global flag_dataset, flag_entrenado, flag_compilado, menu

        if flag_compilado and flag_entrenado:
            window = Evaluate_window("Evaluar", "#ECECEC")
            menu.check_steps()
            return window
        else:
            self.window_compile_train_show()

    def restablecer_parametros_iniciales(self):
        global folder_selected, flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu
        folder_selected = ""
        flag_dataset = False
        flag_compilado = False
        flag_entrenado = False
        flag_evaluacion = False
        menu.check_steps()

    def add_widgets(self):
        self.make_label(40, 40, 300, 100, text='Clasificación de Malware Mediante Deep Learning', background='white',
                        font=("Arial", 19))
        self.make_button(40, 150, 300, 40, "Cargar Dataset", self.window_load_dataset_show)
        self.make_button(40, 200, 300, 40, "Compilar y Entrenar", self.window_compile_train_show)
        self.make_button(40, 250, 300, 40, "Evaluar", self.window_evaluate_show)
        self.make_button(40, 400, 100, 40, "Salir", self.exit)
        self.make_button(150, 400, 190, 40, "Restablecer", self.restablecer_parametros_iniciales)
        self.make_image(500, 60, "./Images/uaslp.jpg")


class Secondary_window(App):
    global WIDTH_WINDOW, HEIGHT_WINDOW, flag_dataset, flag_compilado, flag_entrenado, folder_selected

    def __init__(self, title, color):
        self.main_window = tk.Toplevel()
        App.__init__(self, title, color)

    def exit(self):
        self.main_window.withdraw()


class Compile_train_window(Secondary_window):
    model_progresses_compile = []
    model_progresses_train = []

    threads_compile = []
    threads_train = []

    def __init__(self, title, color):
        Secondary_window.__init__(self, title, color)
        self.provisional_height = HEIGHT_WINDOW + 80 * len(self.ai_models)
        self.main_window.configure(width=WIDTH_WINDOW, height=self.provisional_height, bg=color)
        self.model_progresses_compile = []
        self.model_progresses_train = []
        self.threads_compile = []
        self.threads_train = []
        self.load_widgets()

    def load_widgets(self):
        self.make_label(40, 40, WIDTH_WINDOW - 100, 50,
                        text="Compilación", background='white',
                        font="Arial 12 bold")

        self.make_label(40, 100 * (len(self.ai_models) + 1.5) - 80, WIDTH_WINDOW - 100, 50,
                        text="Entrenamiento", background='white',
                        font="Arial 12 bold")

        self.make_button(WIDTH_WINDOW - 150, self.provisional_height - 65, 100, 40, "Salir",
                         self.exit)
        self.make_button(WIDTH_WINDOW - 150, 40 + 15, 100, 40, "Compilar",
                         func=lambda: self.show_progress(self.ai_models, 40, 120, self.model_progresses_compile,
                                                         self.threads_compile, "compile"))
        self.make_button(WIDTH_WINDOW - 150, 100 * (len(self.ai_models) + 1.5) - 80, 100, 40, "Entrenar",
                         func=lambda: self.show_progress(self.ai_models, 40, 100 * (len(self.ai_models) + 1.5),
                                                         self.model_progresses_train, self.threads_train, "train"))

    def show_progress(self, ai_models, x, y, model_processes, threads, proccess):
        global flag_dataset, flag_entrenado, flag_compilado, flag_evaluacion, menu

        if (proccess == "train" and flag_compilado) or (
                proccess == "compile"):
            for i in range(0, len(ai_models)):
                model_processes.append(
                    ttk.Progressbar(self.main_window, orient=tk.HORIZONTAL, length=WIDTH_WINDOW - 100,
                                    mode='determinate'))
                model_processes[i].place(x=x, y=y + 70 * i)
                self.make_label(x, (y - 30) + 70 * i, WIDTH_WINDOW - 100, 50,
                                text=ai_models[i], background='white',
                                font=("Arial", 11))

            self.main_window.update()
            for i in range(0, len(ai_models)):
                thread = (Thread(target=self.step, args=(i, model_processes)))
                threads.append(thread)

            for j in threads:
                j.start()

            if proccess == "compile":
                flag_dataset = True
                flag_compilado = True
                flag_evaluacion = False
                self.make_image(160, 35, "./Images/check_small.png")
            elif proccess == "train":
                flag_dataset = True
                flag_entrenado = True
                flag_evaluacion = False
                self.make_image(160, 100 * (len(self.ai_models) + 1.5) - 85, "./Images/check_small.png")
            menu.check_steps()

    def step(self, i, model_processes):
        try:
            while model_processes[i]['value'] < 99:
                model_processes[i]["value"] += 1 * random.randint(0, 9)
                self.main_window.update_idletasks()
                time.sleep(.05 * random.randint(0, 9))
        except:
            x = [i for i, a in locals().items() if a == model_processes][0]
            print("Bad Execcution, Thread " + str(i) + " Stopped (" + x + ")")


class Evaluate_window(Secondary_window):

    def __init__(self, title, color):
        Secondary_window.__init__(self, title, color)
        self.provisional_height = HEIGHT_WINDOW + 290
        self.provisional_width = WIDTH_WINDOW + 200 * (len(self.ai_models))
        self.main_window.configure(height=self.provisional_height, width=self.provisional_width,
                                   bg=color)
        self.load_widgets()

    def load_widgets(self):
        global menu, flag_evaluacion
        self.make_label(40, 40, WIDTH_WINDOW - 100, 50,
                        text="Evaluación", background='white',
                        font="Arial 12 bold")

        self.make_button(self.provisional_width - 130, self.provisional_height - 65, 100, 40, "Salir",
                         self.exit)

        for i in range(0, len(self.ai_models)):
            self.make_label(500 * i + 50, 120, self.provisional_width - 100, 50,
                            text=self.ai_models[i], background='white',
                            font="Arial 12 bold")
            self.make_image(500 * i + 50, 150, "./Images/graph.png")
            self.make_label(500 * i + 50, 480, self.provisional_width - 100, 50,
                            text="Tiempo de Entrenamiento: " + str(random.randint(40, 450)) + " seg",
                            background='white',
                            font="Arial 11 bold")
            self.make_label(500 * i + 50, 530, self.provisional_width - 100, 50,
                            text="Memoria consumida: " + str(random.random()) + " MB", background='white',
                            font="Arial 11 bold")
            self.make_label(500 * i + 50, 580, self.provisional_width - 100, 50,
                            text="Precisión del Modelo: " + str(random.random()), background='white',
                            font="Arial 11 bold")
            self.make_label(500 * i + 50, 630, self.provisional_width - 100, 50,
                            text="Tiempo de Acoplamiento: " + str(random.randint(1, 40)) + " seg",
                            background='white',
                            font="Arial 11 bold")
        flag_evaluacion = True
        menu.check_steps()


def main():
    global menu
    menu = Main_window("Clasificación de Malware Mediante Deep Learning", "#ECECEC")
    menu.mainloop()


if __name__ == '__main__':
    main()
