from classes.MachineLearningModel import *
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
import time


class GradientBoostingMachine(MachineLearningModel):
    # Constructor
    def __init__(self, name, verbose):
        super(GradientBoostingMachine, self).__init__(
            model_name=name, verbose=verbose)

    def build(self, n_estimators=1000, max_features=1.0, max_depth=3, subsample=1, learning_rate=0.1):
        self.model = GradientBoostingClassifier(
            learning_rate=learning_rate, n_estimators=n_estimators, subsample=subsample, max_depth=max_depth, max_features=max_features)

    def compile(self):
        self.build()
        print("GBM Model Compiled!")

    def train(self, training_data, training_labels):
        start = time.time()
        self.model.fit(X=training_data, y=training_labels)
        end = time.time()
        self.training_time = end - start
        print("GBM Model Trained!")

    def evaluate(self, samples):
        start = time.time()
        y_test = samples['testing_labels']
        x_test = samples['testing_data']

        self.predicciones = self.model.predict(X=x_test)

        self.mat_confusion = confusion_matrix(
            y_true=y_test,
            y_pred=self.predicciones
        )

        self.accuracy = accuracy_score(
            y_true=y_test,
            y_pred=self.predicciones,
            normalize=True
        )

        self.accuracy = self.accuracy
        end = time.time()
        self.evaluation_time = end - start
