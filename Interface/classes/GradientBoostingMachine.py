from classes.MachineLearningModel import *

from sklearn.model_selection import RepeatedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
import pandas as pd
import multiprocessing

class GradientBoostingMachine(MachineLearningModel):
    #Constructor
    def __init__(self,name,verbose):
        super(GradientBoostingMachine, self).__init__(model_name = name, verbose = verbose)

    #Configuration of the best hyperparameters
    def build(self, n_estimators = 1000, max_features = 'auto', max_depth = 3 , subsample = 1,learning_rate = 0.1):
        self.model  = GradientBoostingClassifier(learning_rate=learning_rate,n_estimators=n_estimators,subsample=subsample,max_depth=max_depth,max_features=max_features)

    def compile(self):
        self.build()
    
    def train(self, training_data , training_labels):
        self.model.fit(X = training_data, y = training_labels)

    def evaluate(self, samples):
        y_test = samples['testing_labels']
        x_test = samples['testing_data']

        self.predicciones = self.model.predict(X = x_test)
        #self.predicciones[:10]

        self.mat_confusion = confusion_matrix(
            y_true    = y_test,
            y_pred    = self.predicciones
        )

        self.accuracy = accuracy_score(
            y_true    = y_test,
            y_pred    = self.predicciones,
            normalize = True
        )
        print("\nGradient Boosting machine\n")
        print("Confusion Matrix")
        print("-------------------")
        print(self.mat_confusion)
        print("")
        self.accuracy  = self.accuracy *100
        print(f"Test Acurracy: {self.accuracy } %\n")


